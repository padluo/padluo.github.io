<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>padluo</title>
  
  <subtitle>分享数据科学家的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-06T16:58:15.863Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>padluo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何用Github搭建博客</title>
    <link href="http://yoursite.com/2020/03/06/%E5%A6%82%E4%BD%95%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/03/06/%E5%A6%82%E4%BD%95%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-03-06T16:13:26.000Z</published>
    <updated>2020-03-06T16:58:15.863Z</updated>
    
    <content type="html"><![CDATA[<p>搭建的博客的域名是 padluo.github.io，自定义域名为 www.padluo.ml，现在已经运行在 GitHub Pages 上面了，大家如果感兴趣可以去看一下。</p><p>下面是站点的预览图：</p><h2 id="准备-Github-账户和仓库"><a href="#准备-Github-账户和仓库" class="headerlink" title="准备 Github 账户和仓库"></a>准备 Github 账户和仓库</h2><p>创建一个名为 {username}.github.io 的仓库，Github Pages 会自动为这个仓库分配一个 github.io 的二级域名，如我创建的仓库名称为 padluo.github.io</p><p>如果 Github 没有配置 SSH 连接的话建议配置一下，利用 SSH 密钥可以连接 Github，而无需在每次访问时提供用户名或密码，新增 SSH 密钥到 GitHub 帐户，参考：</p><p><a href="https://help.github.com/cn/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noopener">https://help.github.com/cn/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account</a></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>安装 Hexo 前提，</p><ul><li>安装 Node.js</li><li>安装 Git</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让brew走代理更新</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</span><br><span class="line">brew update --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前长期支持版: 12.16.1 (包含 npm 6.13.4)</span></span><br><span class="line">brew search node</span><br><span class="line"><span class="comment"># To unlink from current version</span></span><br><span class="line">brew unlink node</span><br><span class="line">brew install node@12</span><br><span class="line"></span><br><span class="line"><span class="comment"># To link installed version</span></span><br><span class="line">➜ /Users/padluo &gt;brew link --force --overwrite node@12</span><br><span class="line">Linking /usr/<span class="built_in">local</span>/Cellar/node@12/12.16.1... 3812 symlinks created</span><br><span class="line"></span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>安装完毕之后，确保环境变量配置好，能正常使用 npm 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>当安装完 Git 应该做的第一件事就是设置用户名称与邮件地址，因为每一个 Git 的提交都会使用这些信息，并且它会写入到每一次提交中，不可更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"padluo"</span></span><br><span class="line">git config --global user.email padluo@example.com</span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>安装 Hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完毕之后，确保环境变量配置好，能正常使用 hexo 命令。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init padluo_blog</span><br><span class="line">$ <span class="built_in">cd</span> padluo_blog</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>初始化的博客架子就出来了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>接下来我们将这个初始化的博客进行部署，放到 Github Pages 上面验证可用性。</p><p>部署命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>在部署之前，需要先知道博客的部署地址，它需要配置一个 Github 的一个 Repository 的地址。</p><p>打开项目根目录的<code>_config.yml</code>文件，找到 Deployment 这个地方，把刚才新建的 Repository 地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:padluo/padluo.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>另外还需要安装一个支持 Git 的部署插件 hexo-deployer-git ，如果不安装，在执行部署命令时会报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>在项目目录下执行安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功之后，执行部署命令，运行结果类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line">位于分支 master</span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'13.229.188.59'</span> to the list of known hosts.</span><br><span class="line">枚举对象: 46, 完成.</span><br><span class="line">对象计数中: 100% (46/46), 完成.</span><br><span class="line">使用 8 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (36/36), 完成.</span><br><span class="line">写入对象中: 100% (46/46), 507.65 KiB | 1.75 MiB/s, 完成.</span><br><span class="line">总共 46 （差异 4），复用 0 （差异 0）</span><br><span class="line">remote: Resolving deltas: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">To github.com:padluo/padluo.github.io.git</span><br><span class="line"> + b8ed093...2d5edc2 HEAD -&gt; master (forced update)</span><br><span class="line">分支 <span class="string">'master'</span> 设置为跟踪来自 <span class="string">'git@github.com:padluo/padluo.github.io.git'</span> 的远程分支 <span class="string">'master'</span>。</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure><p>这时候我们访问一下 GitHub Repository 同名的链接，比如我的博客 Repository 名称是 padluo.github.io ，那我就访问 <a href="http://padluo.github.io" target="_blank" rel="noopener">http://padluo.github.io</a> ，这时候我们可以看到和本地一模一样的内容。这实际上是把博客文件夹下面的 public 下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><p>如果想把博客的源码页放到 GitHub 上面，可以新建一个分支。如我这边新建一个 blog-source 分支，代表博客源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git checkout -b blog-source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"init blog"</span></span><br><span class="line">git remote add origin git@github.com:padluo/padluo.github.io.git</span><br><span class="line">git push origin blog-source</span><br></pre></td></tr></table></figure><h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><p>找到项目根目录下的 _config.yml 文件，修改博客的一些基本信息，找到 Site 区域，配置站点 title、副标题 subtitle、关键字 keywords 等内容，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">padluo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">分享数据科学家的自我修养</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">主要编程语言为</span> <span class="string">Python，领域涵盖大数据、机器学习、深度学习、爬虫等</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">"Python, 大数据, 机器学习, 深度学习, 爬虫"</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">padluo</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>使用 Next 主题，命令行进入到项目到根目录，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>执行完毕后 Next 主题到源码就会出现在项目到 themes/next 文件夹下。</p><p>然后我们修改一些博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段， 修改为 next 即可，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>Next 主题内部页提供了一个配置文件，名字同样是 _config.yml，位置在 themes/next 文件夹下，下文所述内容如果没有特别说明，都是修改的 themes/next/_config.yml 文件，</p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>修改配置文件的 scheme 字段即可，我选了 Pisces 样式（注意是 themes/next/_config.yml 文件），</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>favicon 就是站点标签栏的小图标，有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net" target="_blank" rel="noopener">https://realfavicongenerator.net</a>，到这里上传一张图，便可以字节打包下载各种尺寸和适配不同设备的小图标。</p><p>图片下载下来之后放在 themes/next/source/images 目录下面。</p><p>然后在配置文件里找到 favicon 配置项，把一些相关路径配置进去即可，如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure><h3 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h3><p>avatar 类似站点的头像，如果设置了，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 avatar.png 图片，将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 到配置，修改为正确到路径。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里 rounded 选项是是否显示圆形，rotated 是是否带有旋转效果。</p><h3 id="rss"><a href="#rss" class="headerlink" title="rss"></a>rss</h3><p>开启 RSS 订阅，需要安装一个插件 hexo-generator-feed ，安装完成之后，不需要其他配置，以后每次编译生成站点的时候，就会自动生成 RSS Feed 文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>代码块到显示，把代码到颜色修改为黑色，并把复制按钮到样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><p>修改后的代码样式如下：</p><p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p><h3 id="pangu"><a href="#pangu" class="headerlink" title="pangu"></a>pangu</h3><p>在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><p>支持公式显示，Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/math-equations</a>。</p><p>所以我这里选择了 mathjax，通过修改配置即可启用：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h3 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h3><p>利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，又可以做到无刷新加载。</p><p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pjax <span class="built_in">source</span>/lib/pjax</span><br></pre></td></tr></table></figure><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>现在整个站点只有一篇文章，那么我们怎样来增加其他的文章呢？调用 Hexo 提供的命令即可。</p><p>比如增加一篇「如何用GitHub搭建博客」增加文章，如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"如何用Github搭建博客"</span></span><br></pre></td></tr></table></figure><p>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式。在文章开头通过如下格式添加必要信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: demo # 自动创建</span><br><span class="line">date: 2020-03-03 17:01:24 # 自动创建</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>Github</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>Github</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 标题1</span></span><br><span class="line"></span><br><span class="line">正文1</span><br><span class="line"></span><br><span class="line"><span class="section">## 标题2</span></span><br><span class="line"></span><br><span class="line">正文2</span><br></pre></td></tr></table></figure><p>开头下方撰写正文，MarkDown 格式书写即可。</p><p>这样在下次编译的时候就会自动识别标题、时间、标签、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing.html</a> 。</p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p>增加标签页，在根目录下执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-03-03 17:16:02</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>然后同样的，会生成一个 source/categories/index.md 文件。我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h3 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h3><p>如果要添加搜索功能，需要在项目根目录下先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后在项目的 _config.yml 里面添加搜索设置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>然后在主题的 _config.yml 里面修改如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里用的是 Local Search，如果想使用其他的 Search Service 的话可以参考官方文档：<a href="https://theme-next.org/docs/third-party-services/search-services" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/search-services</a> 。</p><h3 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h3><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2020-03-03 17:31:00</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://padluo.github.io&gt;</span></span></span>"&gt;点击此处<span class="xml"><span class="tag"><span class="string">&lt;/a&gt;</span></span></span>返回首页。</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span></span></span><br><span class="line"><span class="code">    padluo</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里面的一些相关信息和链接可以替换成自己的。</p><p>完成了上面的配置基本就完成了大半了，其实 Hexo 还有很多很多功能，大家可以直接参考官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> 查看更多的配置。</p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>且听下回分解。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题一：仓库嵌套"><a href="#问题一：仓库嵌套" class="headerlink" title="问题一：仓库嵌套"></a>问题一：仓库嵌套</h3><p>warning: adding embedded git repository: themes/next</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">➜ /Users/padluo/Projects/Hexo/padluo_blog git:(blog-source) ✗ &gt;git add _config.yml package-lock.json package.json <span class="built_in">source</span>/404.md <span class="built_in">source</span>/_posts/demo.md <span class="built_in">source</span>/categories <span class="built_in">source</span>/tags themes/next</span><br><span class="line">warning: 正在添加嵌入式 git 仓库：themes/next</span><br><span class="line">提示：You<span class="string">'ve added another git repository inside your current repository.</span></span><br><span class="line"><span class="string">提示：Clones of the outer repository will not contain the contents of</span></span><br><span class="line"><span class="string">提示：the embedded repository and will not know how to obtain it.</span></span><br><span class="line"><span class="string">提示：If you meant to add a submodule, use:</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：  git submodule add &lt;url&gt; themes/next</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：If you added this path by mistake, you can remove it from the</span></span><br><span class="line"><span class="string">提示：index with:</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：  git rm --cached themes/next</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：See "git help submodule" for more information.</span></span><br><span class="line"><span class="string">➜ /Users/padluo/Projects/Hexo/padluo_blog git:(blog-source) ✗ &gt;git status</span></span><br><span class="line"><span class="string">位于分支 blog-source</span></span><br><span class="line"><span class="string">要提交的变更：</span></span><br><span class="line"><span class="string">  （使用 "git reset HEAD &lt;文件&gt;..." 以取消暂存）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    修改：     _config.yml</span></span><br><span class="line"><span class="string">    修改：     package-lock.json</span></span><br><span class="line"><span class="string">    修改：     package.json</span></span><br><span class="line"><span class="string">    新文件：   source/404.md</span></span><br><span class="line"><span class="string">    新文件：   source/_posts/demo.md</span></span><br><span class="line"><span class="string">    新文件：   source/categories/index.md</span></span><br><span class="line"><span class="string">    新文件：   source/tags/index.md</span></span><br><span class="line"><span class="string">    新文件：   themes/next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="string">  （使用 "git add &lt;文件&gt;..." 更新要提交的内容）</span></span><br><span class="line"><span class="string">  （使用 "git checkout -- &lt;文件&gt;..." 丢弃工作区的改动）</span></span><br><span class="line"><span class="string">  （提交或丢弃子模组中未跟踪或修改的内容）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    修改：     themes/next (修改的内容)</span></span><br></pre></td></tr></table></figure><p>仓库内克隆其他仓库，后续该如何进行管理？</p><p>方法一：因为之前是直接把第三方主题克隆到博客目录，有什么改动是无法推送到作者 Git 仓库的，这个时候需要把第三方主题的项目Fork到自己仓库，自己账号下生成一个同名的仓库，并对应一个 url，我们应该 git clone 自己账号下仓库的 url。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add git@github.com:padluo/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>把自己仓库下面第三方主题添加到 Git 子模块，注意: themes/next 这里的目录是因为我用的 next 主题才会写 themes/next，如果你用的不是 next 请把 next 替换成你的第三方主题文件夹名字。博客的根目录会多一个.gitmodules文件，这是一个配置文件，保存了项目 URL 和你拉取到的本地子目录。</p><p>方法二：从第一步<code>git add</code>的 warning 提示可以看出 git 在后续克隆将不会包含这个 themes/next 的内容，当我 push 完之后，在 GitHub 上看到的将是一个灰色的图标，代表这是一个子模块，但是不知道这个子模块的仓库所在的 url，因此在 GitHub 上无法打开这个文件夹。</p><p>解决方案：不使用 git submodule 功能，而是直接将这个文件夹作为根仓库的内容加入并 commit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Step1: 删除已经 staged 过的文件</span><br><span class="line">git rm --cached themes/next</span><br><span class="line">Step2: 查看当前状态</span><br><span class="line">git status</span><br><span class="line">Step3: 重新 stage 这个文件夹</span><br><span class="line">git add themes/next/</span><br></pre></td></tr></table></figure><p>注意：这里一定要加上 /，表示将这个文件夹加入，而不是将这个文件夹当做一个子模块。<br>两者区别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add themes/next</span><br><span class="line">git add themes/next/</span><br></pre></td></tr></table></figure><h3 id="问题二：安装完-Git-没有设置用户名称与邮件地址"><a href="#问题二：安装完-Git-没有设置用户名称与邮件地址" class="headerlink" title="问题二：安装完 Git 没有设置用户名称与邮件地址"></a>问题二：安装完 Git 没有设置用户名称与邮件地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜ /Users/padluo/Projects/Hexo/padluo_blog git:(blog-source) ✗ &gt;git commit -m <span class="string">"add .travis.yml"</span></span><br><span class="line">[blog-source 285845d] add .travis.yml</span><br><span class="line"> Committer: JIANPING LUO &lt;padluo@JIANPINGdeMacBook-Pro.local&gt;</span><br><span class="line">您的姓名和邮件地址基于登录名和主机名进行了自动设置。请检查它们正确</span><br><span class="line">与否。您可以对其进行设置以免再出现本提示信息。运行如下命令在编辑器</span><br><span class="line">中编辑您的配置文件：</span><br><span class="line"></span><br><span class="line">    git config --global --edit</span><br><span class="line"></span><br><span class="line">设置完毕后，您可以用下面的命令来修正本次提交所使用的用户身份：</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 20 insertions(+)</span><br><span class="line"> create mode 100644 .travis.yml</span><br></pre></td></tr></table></figure><blockquote><p>参考资料</p><ol><li><a href="https://mp.weixin.qq.com/s/udAoloIeKINK74T04fQNbQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/udAoloIeKINK74T04fQNbQ</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li></ol></blockquote><hr><p>微信公众号「padluo」，分享数据科学家的自我修养，既然遇见，不如一起成长。</p><hr><p>读者交流电报群</p><p><a href="https://t.me/sspadluo" target="_blank" rel="noopener">https://t.me/sspadluo</a></p><hr><p>知识星球交流群</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搭建的博客的域名是 padluo.github.io，自定义域名为 www.padluo.ml，现在已经运行在 GitHub Pages 上面了，大家如果感兴趣可以去看一下。&lt;/p&gt;
&lt;p&gt;下面是站点的预览图：&lt;/p&gt;
&lt;h2 id=&quot;准备-Github-账户和仓库&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Github" scheme="http://yoursite.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
</feed>
